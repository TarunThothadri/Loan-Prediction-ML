# -*- coding: utf-8 -*-
"""Loan Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lPcwNEqxIgEgpapawdJzMtu-niUo0guI

Importing the dependencies
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn import svm

"""Data collection and preocessing"""

#load data
loan_data = pd.read_csv('/content/loan_dataset.csv')

loan_data.head()

loan_data.shape

loan_data.describe()

loan_data.isnull().sum()

#drop missing values
loan_data = loan_data.dropna()
loan_data.isnull().sum()

loan_data.replace({'Loan_Status':{'N':0,'Y':1}},inplace=True)

loan_data['Dependents'].value_counts()

loan_data.replace({'Dependents':{'3+':4}},inplace=True)

loan_data.replace({'Married':{'No':0,'Yes':1}},inplace=True)

loan_data.replace({'Self_Employed':{'No':0,'Yes':1}},inplace=True)

loan_data.replace({'Gender':{'Male':0,'Female':1}},inplace=True)

loan_data.replace({'Property_Area':{'Rural':0,'Urban':2,'Semiurban':1}},inplace=True)

loan_data.replace({'Education':{'Graduate':1,'Not Graduate':1}},inplace=True)

loan_data.head()

"""Data Visualization"""

sns.countplot(x="Education",hue="Loan_Status",data=loan_data)

sns.countplot(x="Married",hue="Loan_Status",data=loan_data)

#Separate data and label
X=loan_data.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y=loan_data['Loan_Status']

#Train test split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,stratify=Y,random_state=2,test_size=0.1)
print(X.shape,X_train.shape,X_test.shape)

"""Model Training"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

"""Model Evaluation"""

#Training accuracy score
train_prediction = classifier.predict(X_train)
train_acc_score = accuracy_score(train_prediction,Y_train)
print("Training Accuracy : ",train_acc_score)

#Testing accuracy score
test_prediction = classifier.predict(X_test)
test_acc_score = accuracy_score(test_prediction,Y_test)
print("Testing Accuracy : ",test_acc_score)

"""Predicitve System"""

input_data = ('LP001003','Male','Yes',1,'Graduate','No',4583,1508,128,360,1,'Rural')
input_np = np.asarray(input_data)
#input_re = input_np.reshape(1,-1)
#pred = classifier.predict(input_re)

